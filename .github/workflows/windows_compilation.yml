name: Build_Windows

on:
  workflow_dispatch:

jobs:
  build_qt:
    runs-on: windows-2022
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Download source
      run: |
        Remove-Item -Path C:\Android -Force -Recurse
        Remove-Item -Path C:\SeleniumWebDrivers -Force -Recurse
        Remove-Item -Path C:\Miniconda -Force -Recurse
        Remove-Item -Path C:\Julia -Force -Recurse
        Remove-Item -Path C:\tools -Force -Recurse
        Remove-Item -Path C:\selenium -Force -Recurse
        Remove-Item -Path C:\vcpkg -Force -Recurse
        docker image prune --all --force
        choco install -y git.install
        choco install -y wget
        choco install -y 7zip.install
        choco install -y openssl
        git clone --branch kde/5.15 https://invent.kde.org/qt/qt/qt5.git C:\qt5source
        cd C:\qt5source
        git checkout kde/5.15
        git submodule update --init --recursive --depth 1
    - name: Get jom
      shell: cmd
      run: |
        call "wget.exe" -q --show-progress --no-check-certificate "https://download.qt.io/official_releases/jom/jom_1_1_3.zip" -O jom_1_1_3.zip
        call "7z" x -y jom_1_1_3.zip -ojom
        del jom_1_1_3.zip
    - name: Set PATH
      shell: bash
      run: |
        echo "C:/qt5source/gnuwin32/bin" >> $GITHUB_PATH
        echo "D:/a/Qt5Binaries/Qt5Binaries/jom" >> $GITHUB_PATH
    - name: Configure
      shell: cmd
      run: |
        mkdir build
        cd build
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 10.0.19041.0
        "C:\qt5source\configure" -prefix "D:\a\Qt5Binaries\Qt5Binaries\install" -opensource -confirm-license ^
            -release -no-debug-and-release ^
            -no-pch ^
            -nomake tests ^
            -nomake examples ^
            -skip qt3d ^
            -skip qtcharts ^
            -skip qtdatavis3d ^
            -skip qtdocgallery ^
            -skip qtlocation ^
            -skip qtlottie ^
            -skip qtpurchasing ^
            -skip qtquick3d ^
            -skip qtquicktimeline ^
            -skip qtscript ^
            -skip qtspeech ^
            -skip qtvirtualkeyboard ^
            -skip qtwebengine ^
            -skip qtwebglplugin ^
            -opengl dynamic ^
            -qt-zlib ^
            -qt-freetype ^
            -qt-harfbuzz ^
            -qt-libpng ^
            -qt-libjpeg ^
            -openssl-runtime OPENSSL_INCDIR="C:\Program Files\OpenSSL\include"
# -icu  ?
# -openssl-runtime OPENSSL_INCDIR="<path>" ?
# -openssl-runt -I %OPENSSL_INCLUDE_x64% -L %OPENSSL_LIB_x64% ?
    - name: Build
      shell: cmd
      run: |
        cd build
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 10.0.19041.0
        echo %PATH%
        jom -j2
    - name: Install
      shell: cmd
      run: |
        cd build
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 10.0.19041.0
        jom install -j2
    - name: Package
      shell: cmd
      working-directory: ./install
      run: |
        call "7z" a -y -tzip "..\Qt 5.15.10 for Windows.zip" .
    - name: Upload
      uses: actions/upload-artifact@v3
      with:
        name: "Qt 5.15.10 for Windows"
        path: "Qt 5.15.10 for Windows.zip"

  build_qtwebengine:
    runs-on: windows-2022
    needs: [build_qt]
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Download source
      run: |
        Remove-Item -Path C:\Android -Force -Recurse
        Remove-Item -Path C:\SeleniumWebDrivers -Force -Recurse
        Remove-Item -Path C:\Miniconda -Force -Recurse
        Remove-Item -Path C:\Julia -Force -Recurse
        Remove-Item -Path C:\tools -Force -Recurse
        Remove-Item -Path C:\selenium -Force -Recurse
        Remove-Item -Path C:\vcpkg -Force -Recurse
        docker image prune --all --force
        choco install -y git.install
        choco install -y wget
        choco install -y 7zip.install
        choco install -y python2
        choco install -y openssl
        choco install -y ninja
        git clone --branch kde/5.15 https://invent.kde.org/qt/qt/qt5.git C:\qt5source
        cd C:\qt5source
        git checkout kde/5.15
        git submodule update --init --recursive --depth 1
    - name: Get jom
      shell: cmd
      run: |
        call "wget.exe" -q --show-progress --no-check-certificate "https://download.qt.io/official_releases/jom/jom_1_1_3.zip" -O jom_1_1_3.zip
        call "7z" x -y jom_1_1_3.zip -ojom
        del jom_1_1_3.zip
    - name: Set PATH
      shell: bash
      run: |
        echo "C:/qt5source/gnuwin32/bin" >> $GITHUB_PATH
        echo "D:/a/Qt5Binaries/Qt5Binaries/jom" >> $GITHUB_PATH
        echo "C:/Python27" >> $GITHUB_PATH
        echo "C:/Python27/Scripts" >> $GITHUB_PATH
    - name: Download already-built Qt
      uses: actions/download-artifact@v3
      with:
        name: "Qt 5.15.10 for Windows"
    - name: Unpack already-built Qt
      shell: cmd
      run: |
        call "7z" x -y "Qt 5.15.10 for Windows.zip" -oinstall
    - name: Configure
      shell: cmd
      working-directory: C:\qt5source
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 10.0.19041.0
        C:\msys64\usr\bin\find.exe . -name .git -type d -exec C:\msys64\usr\bin\rm.exe -rf {} +
        mkdir build
        cd build
        "D:\a\Qt5Binaries\Qt5Binaries\install\bin\qmake.exe" ..\qtwebengine ^
            -- -no-webengine-geolocation -webengine-proprietary-codecs
    - name: Build
      shell: cmd
      working-directory: C:\qt5source\build
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 10.0.19041.0
        C:\msys64\usr\bin\timeout.exe 300m jom -j2 || cd .
    - name: Cache Build Folder
      uses: actions/cache/save@v3
      id: cache
      with:
        path: C:\qt5source
        key: Windows-cache

  build_qtwebengine_step2:
    runs-on: windows-2022
    needs: [build_qtwebengine]
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Cleanup and install needed programs
      run: |
        Remove-Item -Path C:\Android -Force -Recurse
        Remove-Item -Path C:\SeleniumWebDrivers -Force -Recurse
        Remove-Item -Path C:\Miniconda -Force -Recurse
        Remove-Item -Path C:\Julia -Force -Recurse
        Remove-Item -Path C:\tools -Force -Recurse
        Remove-Item -Path C:\selenium -Force -Recurse
        Remove-Item -Path C:\vcpkg -Force -Recurse
        docker image prune --all --force
        choco install -y git.install
        choco install -y wget
        choco install -y 7zip.install
        choco install -y python2
        choco install -y openssl
        choco install -y ninja
    - name: Restore cached Build folder
      uses: actions/cache/restore@v3
      id: cache
      with:
        path: C:\qt5source
        key: Windows-cache
    - name: Get jom
      shell: cmd
      run: |
        call "wget.exe" -q --show-progress --no-check-certificate "https://download.qt.io/official_releases/jom/jom_1_1_3.zip" -O jom_1_1_3.zip
        call "7z" x -y jom_1_1_3.zip -ojom
        del jom_1_1_3.zip
    - name: Set PATH
      shell: bash
      run: |
        echo "C:/qt5source/gnuwin32/bin" >> $GITHUB_PATH
        echo "D:/a/Qt5Binaries/Qt5Binaries/jom" >> $GITHUB_PATH
        echo "C:/Python27" >> $GITHUB_PATH
        echo "C:/Python27/Scripts" >> $GITHUB_PATH
    - name: Download already-built Qt
      uses: actions/download-artifact@v3
      with:
        name: "Qt 5.15.10 for Windows"
    - name: Unpack already-built Qt
      shell: cmd
      run: |
        call "7z" x -y "Qt 5.15.10 for Windows.zip" -oinstall
    - name: Build
      shell: cmd
      working-directory: C:\qt5source\build
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 10.0.19041.0
        jom -j2
    - name: Install
      shell: cmd
      working-directory: C:\qt5source\build
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 10.0.19041.0
        jom install -j2
    - name: Package
      shell: cmd
      working-directory: ./install
      run: |
        call "7z" a -y -tzip "..\Qt 5.15.10 for Windows with QtWebEngine.zip" .
    - name: Upload
      uses: actions/upload-artifact@v3
      with:
        name: "Qt 5.15.10 for Windows with QtWebEngine"
        path: "Qt 5.15.10 for Windows with QtWebEngine.zip"
