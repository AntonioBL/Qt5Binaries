name: Linux

on:
  workflow_dispatch:
    inputs:
      build_architecture:
        description: 'Build for Linux architecture: amd64, i386'
        required: true
        default: 'amd64'

jobs:
  build_qt5:
    runs-on: ubuntu-latest
    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}
    - name: Clone repository
      uses: actions/checkout@v3
    - name: setup QEMU
      uses: docker/setup-qemu-action@v2
    - name: setup Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build and export Docker image (Qt5 without Qt WebEngine)
      uses: docker/build-push-action@v4
      with:
        build-args: build_architecture=${{ github.event.inputs.build_architecture }}
        context: .
        tags: myimage:latest
        outputs: type=docker,dest=/tmp/myimage.tar
    - name: Cache Docker layers
      uses: actions/cache/save@v3
      id: cache
      with:
        path: /tmp/myimage.tar
        key: ${{ runner.os }}-${{ github.event.inputs.build_architecture }}

  build_qt5_qtwebengine_1:
    runs-on: ubuntu-latest
    needs: build_qt5
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Restore cached Docker layers
      uses: actions/cache/restore@v3
      id: cache
      with:
        path: /tmp/myimage.tar
        key: ${{ runner.os }}-${{ github.event.inputs.build_architecture }}
    - name: setup QEMU
      uses: docker/setup-qemu-action@v2
    - name: setup Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Cleanup
      run: |
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /usr/share/dotnet
        sudo docker load --input /tmp/myimage.tar
        sudo rm -rf /tmp/myimage.tar
    - name: Build and export 1st part of compilation
      uses: docker/build-push-action@v4
      with:
        build-args: build_architecture=${{ github.event.inputs.build_architecture }}
        context: .
        tags: myimage2:latest
        outputs: type=docker,dest=/tmp/myimage2.tar
        file: Dockerfile2
    - name: Cache Docker layers
      uses: actions/cache/save@v3
      id: cache2
      with:
        path: /tmp/myimage2.tar
        key: ${{ runner.os }}-qtwebengine-${{ github.event.inputs.build_architecture }}

  build_qt5_qtwebengine_2:
    runs-on: ubuntu-latest
    needs: build_qt5_qtwebengine_1
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Cleanup
      run: |
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /usr/share/dotnet
    - name: Restore cached Docker layers
      uses: actions/cache/restore@v3
      id: cache2
      with:
        path: /tmp/myimage2.tar
        key: ${{ runner.os }}-qtwebengine-${{ github.event.inputs.build_architecture }}
    - name: setup QEMU
      uses: docker/setup-qemu-action@v2
    - name: setup Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build Qt WebEngine
      run: |
        sudo mkdir /output
        chmod +x /home/runner/work/Qt5Binaries/Qt5Binaries/Recipe3
        sudo cp /home/runner/work/Qt5Binaries/Qt5Binaries/Recipe1 /output
        sudo cp /home/runner/work/Qt5Binaries/Qt5Binaries/Recipe2 /output
        sudo cp /home/runner/work/Qt5Binaries/Qt5Binaries/Recipe3 /output
        sudo docker load --input /tmp/myimage2.tar
        sudo rm -rf /tmp/myimage2.tar
        sudo docker run -i -v "/output:/output" "myimage2:latest" /bin/bash /output/Recipe3 ${{ github.event.inputs.build_architecture }}
    - name: Upload artifacts on GitHub
      uses: actions/upload-artifact@v3
      with:
        name: "qt5linux_${{ github.event.inputs.build_architecture }}"
        path: "/output/qt5linux_${{ github.event.inputs.build_architecture }}.tar.gz"
